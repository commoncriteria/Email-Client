<?xml version="1.0" encoding="utf-8"?>
<?xsl-stylesheet type="text/xsl" href="../transforms/xsl/module2html.xsl"?>

<!-- test -->

<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCModule.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<Module boilerplate="yes" target-products="Email Clients" name="PP-Module for Email Clients" 
  xmlns="https://niap-ccevs.org/cc/v1"
  xmlns:sec="https://niap-ccevs.org/cc/v1/section"
  xmlns:h="http://www.w3.org/1999/xhtml">

  <PPReference>
    <ReferenceTable>
      <PPVersion>1.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2021-06-18</PPPubDate>
      <Keywords>email; email client</Keywords>
    </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2021-06-18</date>
      <subject>Initial release as PP-Module</subject>
    </entry>
  </RevisionHistory>
  <sec:Introduction>
    <sec:Overview>
      <!-- editor's note: Section 1.1 replaced with boilerplate text from other recent modules. Original materials integrated here and also moved down to section 1.3 -->
      The scope of the Email Client PP-Module is to describe the security functionality of email client applications in terms of [CC] 
      and to define functional and assurance requirements for the specific email-related capabilities of email client applications.
      Email clients are user applications that provide functionality to send, receive, access and manage email. 
      
      This PP-Module is intended for use with the following Base-PP: <h:ul>
        <h:li>Protection Profile for Application Software, Version 1.3</h:li>
      </h:ul>
      <h:p/> This Base-PP is valid because email clients are a specific type of software application.
      
      
      
      
    </sec:Overview>
    <!-- 
    <section id="glossary" title="Terms">
      <subsection title="Common Criteria Terms">
	<glossary>
	  <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security Evaluation.</description>
	  </entry>
	  <entry>
	    <term><abbr title="Base Protection Profile">Base-PP</abbr></term>
	    <description>Protection Profile used to build a PP-Configuration.</description>
	  </entry>
	  <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
            of products.</description>
	  </entry>
	  <entry>
	    <term><abbr title="Protection Profile Configuration">PP-Configuration</abbr></term>
	    <description>Protection Profile composed of Base Protection Profiles and Protection Profile Module.</description>
	  </entry>
	  <entry>
	    <term><abbr title="Protection Profile Module">PP-Module</abbr></term>
            <description>An implementation-independent statement of security needs for a TOE type complementary to one or more Base Protection Profiles.
	    </description>
	  </entry>
	  <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
            product.</description>
	  </entry>
	  <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>The product under evaluation. In this case, application software and its
            supporting documentation.</description>
	  </entry>
	  <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
	  </entry>
	  <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
            linkend="ST"/>. </description>
	  </entry>
	  <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
	  </entry>
	  <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
	  </entry>
	</glossary>
      </subsection>  -->
      <tech-terms>
	  
        <term full="ActiveSync">Microsoft protocol for synchronizing messaging and calendar data between
          mobile clients and email servers.</term>
        <term abbr="AES" full="Advanced Encryption Standard"></term>
        <term full="Add-on">Capability or functionality added to an application including plug-ins,
          extensions or other controls.</term>
        <term abbr="CBC" full="Cipher Block Chaining"></term>
        <term abbr="CMS" full="Cryptographic Message Syntax"></term>
        <term abbr="CRL" full="Certificate Revocation List"></term>
        <term abbr="CSP" full="Critical Security Parameter"></term>
        <term abbr="DRBG" full="Deterministic Random Bit Generator"></term>
        <term abbr="ECDSA" full="Elliptic Curve Digital Signature Algorithm"></term>
        <term full="Email Client">Application used to send, receive, access and manage email provided by an
          email server. The terms email client and TOE are interchangeable in this
          document.</term>
        <term abbr="IMAP" full="Internet Message Access Protocol">Protocol for an email client to retrieve
          email from an email server over TCP/IP; IMAP4 defined in RFC 3501.</term>
        <term abbr="IETF" full="Internet Engineering Task Force"></term>
        <term abbr="IV" full="Initialization Vector"></term>
        <term abbr="MAPI" full="Messaging Application Programming Interface">Open specification used by
          email clients such as Microsoft Outlook and Thunderbird; defined in <xref to="bibmapispec"/>.</term>
        <term abbr="MTA" full="Mail Transfer Agent"></term>
        <term abbr="NIST" full="National Institute of Standards and Technology"></term>
        <term abbr="PBKDF" full="Password-Based Key Derivation Function"></term>
        <term abbr="PDF" full="Portable Document Format"></term>
        <term abbr="POP" full="Post Office Protocol">Protocol for an email client to retrieve email from
          an email server over TCP/IP; POP3 defined in RFC 1939.</term>
        <term abbr="PRF" full="Pseudo-Random Function"></term>
        <term abbr="RBG" full="Random Bit Generator"></term>
        <term abbr="RPC" full="Remote Procedure Call">Protocol used by Microsoft Exchange to send/receive
          MAPI commands; defined in <xref to="MS-OXCRPC"/>.</term>
	  
        <term abbr="S/MIME" full="Secure/Multipurpose Internet Mail Extensions">Used to sign
          or encrypt messages at the request of the user upon sending email and to verify
          digital signature on a signed message upon receipt.</term>
            
        <term abbr="SMTP" full="Simple Mail Transfer Protocol">Protocol for an email client to send email
          to an email server over TCP/IP; SMTP defined in RFC 5321.</term>
      </tech-terms>
    
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
      
      The Target of Evaluation  (TOE) in this PP-Module is an email client application running on a desktop or mobile operating system. 
      <h:p/>
      The complexity of email content and email clients has grown over time.
      Modern email clients can render HTML as well as plaintext,
      and may include functionality to display common attachment formats, such as Adobe PDF and  Microsoft Word documents.
      Some email clients allow their functionality to be modified by users through the addition of add-ons.
      Protocols have also been defined for communicating between email clients and servers.
      Some clients support multiple protocols for doing the same task,
      allowing them to be configured according to email server specifications.
      <h:p/>
      The complexity
      and rich feature set of modern email clients make them a target for attackers, introducing
      security concerns. This document is intended to facilitate the improvement of email client
      security by requiring use of operating system security services, cryptographic standards, and
      environmental mitigations. Additionally, the requirements in this document define acceptable
      behavior for email clients regardless of the security features provided by the operating
      system.
      <h:p/>
      This Module along with the Protection Profile for Application
      Software <xref to="bibAppPP"/> provide a baseline set of Security Functional
      Requirements (SFRs) for email clients running on any operating system regardless of the
      composition of the underlying platform.
      
      
      <section title="TOE Boundary" id="TOEboundary">
        The physical boundary of the email client is a software application running on a general-purpose operating system. The TOE boundary may include third-party add-ons, but these are non-interfering with respect to security;
        add-ons provide features that are outside the TOE's logical boundary but must be implemented in such a manner that their inclusion does not compromise the security of the TSF. The figure below shows the TOE's interaction with
        remote external interfaces that are used to transfer mail between clients. Two separate email clients are shown to show how the TOE can function as both a sender and a receiver using different protocols.
        
        
        <figure id="mua_mta" entity="images/mua_mta.png" max-width="inherit"
          title="Sending and Delivering Email over TLS"/> 
      </section> 

      
    </section>
    <section title="Use Cases" id="usecases">Email clients perform tasks associated primarily with
    the following use case.
    <usecases><usecase title="Sending, receiving, accessing, managing and displaying email" id="usecase1">
      <description>Email clients are used for sending, receiving, viewing, accessing, managing
      email in coordination with a mail server. Email clients can render HTML as well as
      plaintext, and can display common attachment formats. </description>
    </usecase></usecases>
    </section>
  </sec:Introduction>
   <sec:Conformance_Claims boilerplate="no">
      <cclaims>
        <cclaim name="Conformance Statement">
          <description> This PP-Module inherits exact conformance as required from
            the specified Base-PP and as defined in the CC and
            CEM addenda for Exact Conformance, Selection-Based SFRs, and Optional
            SFRs (dated May 2017).<h:p/> 
            No additional PPs or PP-Modules are allowed to
            be specified in a PP-Configuration with this PP-Module aside from the Base-PP.
          </description>
        </cclaim>
        <cclaim name="CC Conformance Claims">
          <description>This PP-Module is conformant to Parts 2 (extended) and 3
            (extended) of Common Criteria Version 3.1, Release 5 [CC].
          </description>
        </cclaim>
        <cclaim name="Package Claims">
          <description>This PP-Module is TLS Pacakge conformant.</description>
        </cclaim>
      </cclaims>
    </sec:Conformance_Claims>


  <sec:spd title="Security Problem Description">
      The security problem is described in terms of the threats that the email client is expected to address, assumptions about the operational environment, and any organizational security policies that it is expected to enforce.
    <h:p/>
      This PP-Module does not repeat the threats, assumptions, and organizational security policies identified in the App PP, though they all apply given the conformance and hence dependence of
      this PP-Module on it.
      Together the threats, assumptions and organizational security
      policies of the App PP and those defined in this PP-Module describe those addressed
      by an email client as the Target of Evaluation.
    <h:p/>
      Notably, email clients are particularly at risk from the Network Attack threat identified in the App PP.
      Attackers can send malicious email messages directly to users,
      and the email client will render or otherwise process this untrusted
      content.
    
    <sec:Threats> The following threat is specific to email
    clients, and represents an addition to those identified in the Base-PP.
    <threats>
      <threat name="T.FLAWED_ADDON">
	<description> Email client functionality can be extended with integration of third-party
	utilities and tools. This expanded set of capabilities is made possible via the use of
	add-ons. The tight integration between the basic email client code and the new
	capabilities that add-ons provide increases the risk that malefactors could inject
	serious flaws into the email client application, either maliciously by an attacker, or
	accidentally by a developer. These flaws enable undesirable behaviors including, but not
	limited to, allowing unauthorized access to sensitive information in the email client,
	unauthorized access to the device's file system, or even privilege escalation that
	enables unauthorized access to other applications or the operating system.
	</description>
	<consistency-rationale>
	  The threat of a user installing a flawed add-on is consistent with the T.LOCAL_ATTACK threat from the Base-PP. A flawed addon, whether crafted deliberately or unintentionally, could cause the product to operate in a manner where it
	  or its platform can be compromised.
	</consistency-rationale>
	<objective-refer ref="O.MANAGEMENT">
	  <rationale>
	    The ability to manage the TOE allows for only authorized users to install add-ons, to enable/disable the ability to install add-ons, or to not have any support for add-ons at all.
	  </rationale>
	</objective-refer>
      </threat>
      
      
      
      <threat name="T.NETWORK_ATTACK">
        <description>See App PP, Section 3.1.</description>
        <consistency-rationale>This threat comes directly from the Base-PP.</consistency-rationale>
        <objective-refer ref="O.PROTECTED_COMMS">
          <rationale>The threat T.NETWORK_ATTACK is countered by O.PROTECTED_COMMS as this provides for integrity of transmitted data.
          </rationale>
        </objective-refer>
        <objective-refer ref="O.MANAGEMENT">
          <rationale>The threat T.NETWORK_ATTACK is countered by O.MANAGEMENT as this provides for the ability to configure the application to defend against network attack.
          </rationale>
        </objective-refer>
      </threat>
      
          
      <threat name="T.NETWORK_EAVESDROP">
        <description>See App PP, Section 3.1.</description>
        <consistency-rationale>This threat comes directly from the Base-PP.</consistency-rationale>
        <objective-refer ref="O.PROTECTED_COMMS">
          <rationale>The threat T.NETWORK_EAVESDROP is countered by O.PROTECTED_COMMS as this provides for confidentiality of transmitted data.
          </rationale>
        </objective-refer>
        <objective-refer ref="O.MANAGEMENT">
          <rationale>	
            The threat T.NETWORK_EAVESDROP is countered by O.MANAGEMENT as this provides for the ability to configure the application to protect the confidentiality of its transmitted data.
          </rationale>
        </objective-refer>
      </threat>
              
              
      <threat name="T.PHYSICAL_ACCESS">
        <description>See App PP, Section 3.1.</description>
        <consistency-rationale>This threat comes directly from the Base-PP.</consistency-rationale>
        <objective-refer ref="O.PROTECTED_STORAGE">
          <rationale>The objective O.PROTECTED_STORAGE protects against unauthorized attempts to access physical storage used by the TOE.
          </rationale>
        </objective-refer>
      </threat>
      
      
      
    </threats>
    </sec:Threats>
        <sec:Assumptions>
        <assumptions/>
      </sec:Assumptions>
      
    
    <sec:Organizational_Security_Policies>
      <OSPs/>
    </sec:Organizational_Security_Policies>
    
  </sec:spd>
  
  <sec:Security_Objectives>This PP-Module adds SFRs to objectives
  identified in the Base-PP and describes an additional objective specific to this PP-Module. 
    <sec:Security_Objectives_for_the_TOE>
  <SOs>
    <SO name="O.MANAGEMENT">
      <description>This objective is defined in the Base-PP. This PP-Module maps additional SFRs to it to address the management functionality that is specific to email client applications.</description>
      <consistency-rationale>This objective is an enhancement to the O.MANAGEMENT objective defined in the Base-PP, specifically in regards to the secure administration of functions that are specific to email client applications.</consistency-rationale>
      <addressed-by>FDP_NOT_EXT.1, FMT_MOF_EXT.1, FDP_NOT_EXT.2 (optional)</addressed-by>
      <rationale>
        QQQQ
      </rationale>
    </SO>
    <SO name="O.PROTECTED_STORAGE">
      <description>This objective is defined in the Base-PP. This PP-Module maps additional SFRs to it to address the data at rest protection functionality that is specific to email client applications.</description>
      <consistency-rationale>This objective is an enhancement to the O.PROTECTED_STORAGE objective defined in the Base-PP, specifically in regards to the data at rest that is specified to email client applications.</consistency-rationale>
      <addressed-by>FCS_CKM_EXT.3, FCS_CKM_EXT.4, FCS_KYC_EXT.1, FCS_CKM_EXT.5 (optional), FCS_IVG_EXT.1 (optional), FCS_SAG_EXT.1 (optional), FCS_NOG_EXT.1 (optional), FCS_COP_EXT.2 (selection-based), FCS_SMC_EXT.1 (selection-based)</addressed-by>
      <rationale>
        QQQQ
      </rationale>
    </SO>
    <SO name="O.PROTECTED_COMMS">
      <description>This objective is defined in the Base-PP. This PP-Module maps additional SFRs to it to address the data in transit protection functionality that is specific to email client applications.</description>
      <consistency-rationale>This objective is an enhancement to the O.PROTECTED_COMMS objective defined in the Base-PP, specifically in regards to the data in transit that is specified to email client applications.</consistency-rationale>
      <addressed-by>FCS_SMIME_EXT.1, FDP_SMIME_EXT.1, FIA_X509_EXT.3, FTP_ITC_EXT.1, FIA_SASL_EXT.1 (selection-based)</addressed-by>
      <rationale>
        QQQQ
      </rationale>
    </SO>
    <SO name="O.ADDON_INTEGRITY">
      <description>To address issues associated with malicious or flawed plug-ins or
        extensions, conformant email clients implement mechanisms to ensure their integrity.
        This includes verification at installation time and update.</description>
      <consistency-rationale>This objective is an enhancement to the O.INTEGRITY objective defined in the Base-PP. Where O.INTEGRITY is concerned with the integrity of the TOE application, O.ADDON_INTEGRITY is concerned with the integrity of third-party addons that can 
        be loaded into the TOE.</consistency-rationale>
      <addressed-by>FPT_AON_EXT.1, FPT_AON_EXT.2</addressed-by>
      <rationale>
QQQQ
      </rationale>
    </SO>
  </SOs>
</sec:Security_Objectives_for_the_TOE>
 
    <section title="Security Objectives for the Operational Environment"
      id="objectivesEnvironment"><!-- The Operational Environment of the TOE implements technical and procedural measures 
      to assist the TOE in correctly providing its security functionality (which is defined by the security objectives for the TOE). 
      The security objectives for the Operational Environment consist of a set of statements describing the goals that the Operational Environment should achieve. 
      This section defines the security objectives that are to be addressed by the IT domain or by non-technical or procedural means. 
      The assumptions identified in Section 3 are incorporated as security objectives for the environment. -->
      <h:p/>
      No environmental security objectives have been identified that are specific to email clients. However, any
      environmental security objectives defined in the Base-PP will also apply to the portion of the TOE that implements email client functionality.
      <!--      <SOEs>
        <SOE name="OE.PLACEHOLDER">
          <description>placeholder</description>
          <consistency-rationale></consistency-rationale>
        </SOE>
      </SOEs> -->
    </section>
    
    
    <section title="Security Objectives Rationale" id="SOR">
      <!-- NOTE: This section should remain empty and is populated from the rationale tags in the previous sections.  -->
    </section>
</sec:Security_Objectives>
  
  <sec:Security_Requirements>
    <base-pp id="app">
      <raw-url>https://raw.githubusercontent.com/commoncriteria/application/master/input/application.xml</raw-url>
      <url>https://www.niap-ccevs.org/Profile/Info.cfm?PPID=442&amp;id=442</url>
    
      <modified-sfrs/>
      <additional-sfrs/>
      
      <con-toe>
        If this PP-Module is used to extend the App PP, the TOE type for the overall TOE is still a software application.
        The TOE boundary is simply extended to include the email client functionality that is built into the application so that additional security functionality is claimed within the scope of the TOE.
      </con-toe>
      
      <con-sec-prob/>
      <con-obj/>
      <con-op-en>
        This PP-Module does not define any objectives for the TOE's operational environment. 
      </con-op-en>
      <con-mod ref="QQQQ"></con-mod>
    </base-pp> 
      <man-sfrs>
        
	<sec:man_fcs title="Cryptographic Support (FCS)">
	
	  <f-component cc-id="fcs_ckm_ext.3" name="Protection of Key and Key Material">
	    <consistency-rationale>This SFR defines how keys and key material are saved by the email client. It does not impact the App PP functionality. 
	    </consistency-rationale>
	    <f-element>
	      <title>The TSF shall
	      <selectables>
		<selectable>not store keys in non-volatile memory</selectable>
		<selectable>
		  only store keys in non-volatile memory when wrapped as specified in
		  FCS_COP_EXT.2 unless the key meets any one of following
		  criteria:
		  <selectables linebreak="yes">
		    <selectable>
		      The plaintext key is not part of the key chain as specified in
		      FCS_KYC_EXT.1</selectable>
		    <selectable>The plaintext key will no longer provide access to the encrypted
		    data after initial provisioning</selectable>
		    <selectable id="ckm_keysplit">
		      The plaintext key is a key split that is combined as specified in
		      FCS_SMC_EXT.1, and the other half of the key split is
		      either
		      <selectables>
			<selectable>wrapped as specified in FCS_COP_EXT.2</selectable>
			<selectable>derived and not stored in non-volatile memory</selectable></selectables></selectable><selectable>The plaintext key is stored on an external storage device for use as
		      an authorization factor</selectable>
		    <selectable>The plaintext key is used to wrap a key as specified in FCS_COP_EXT.2 that is already wrapped as specified in FCS_COP_EXT.2</selectable>
		    <selectable>The plaintext key is the public portion of the key pair</selectable>
		  </selectables>
		</selectable>
		</selectables>.
	      </title>
	      <note role="application">The plaintext key storage in non-volatile memory is allowed for
	      several reasons. If the keys exist within protected memory that is not user accessible
	      on the email client or operational environment, the only methods that allow it to play
	      a security relevant role is if it is a key split or providing additional layers of
	      wrapping or encryption on keys that have already been protected. </note>
	      <aactivity>
		<TSS>
		The evaluator shall verify the TSS for a high-level description of method used to protect keys stored in nonvolatile memory.<h:p/>
		The evaluator shall verify the TSS to ensure it describes the storage location of all keys and the protection of all keys stored in nonvolatile memory. The description of the key chain shall be reviewed to ensure FCS_COP_EXT.2 is followed for the storage of wrapped or encrypted keys in nonvolatile memory and plaintext keys in nonvolatile memory meet one of the criteria for storage.<h:p/>
		</TSS>
	        <Guidance>
	          There are no guidance EAs for this component.<h:p/>
	        </Guidance>
	        <Tests>
	          There are no test EAs for this component.<h:p/>
	        </Tests>
	      </aactivity>

	    </f-element>
	  </f-component>
	  <f-component cc-id="fcs_ckm_ext.4" name="Cryptographic Key Destruction">
	    <consistency-rationale>This SFR defines how email messages are formatted when sent and received by the client. It does not impact the App PP functionality. 
	    </consistency-rationale>
	    <f-element>
	      <title>The TSF shall <selectables linebreak="yes">
	      <selectable>invoke platform-provided key destruction</selectable>
	      <selectable>implement key destruction using <selectables linebreak="yes">
	      <selectable>For volatile memory, the erasure shall be executed by a single
	      direct overwrite <selectables linebreak="yes">
	      <selectable>consisting of a pseudo-random pattern using the email client's
	      RBG</selectable>
	      <selectable>consisting of a pseudo-random pattern using the host platform's
	      RBG</selectable>
	      <selectable>consisting of zeroes</selectable></selectables></selectable><selectable>For non-volatile storage, the erasure shall be executed by
	      <selectables linebreak="yes">
		<selectable>single</selectable>
		<selectable>three or more times</selectable>
		</selectables> overwrite of key data storage location consisting of
		<selectables linebreak="yes">
		  <selectable> a pseudo-random pattern using the email client's RBG (as
		  specified in FCS_RBG_EXT.1 of <xref to="bibAppPP"/></selectable>
		  <selectable>a pseudo-random pattern using the host platform's RBG</selectable>
		  <selectable>a static pattern</selectable>
		</selectables>
	      </selectable>
	      </selectables></selectable>
	      </selectables> that meet the following: <selectables linebreak="yes">
	      <selectable>NIST SP800-88</selectable>
	      <selectable>no standard</selectable>
	      </selectables> for destroying all keying material and cryptographic security
	      parameters when no longer needed. </title>
	      <note role="application">
		<h:p>
		  For the purposes of this requirement, keying material refers to
		  authentication data, passwords, symmetric keys, data used to derive keys, etc.
		</h:p>
		<h:p>
		  The destruction indicated above applies to each intermediate storage area for
		  key/cryptographic critical security parameters (i.e., any storage, such as memory
		  buffers, that is included in the path of such data) upon the transfer of the
		  key/cryptographic critical security parameter to another memory location.
		</h:p>
	      </note>
	      <aactivity>
		<TSS>
		If the platform provides the key destruction, then the evaluator examines the TSS to verify that it describes how the key destruction functionality is invoked.
		<h:p/>
		  If the application invokes key destruction, the evaluator checks to ensure the TSS describes each of the secret keys (keys used for symmetric encryption or data authentication), private keys, and CSPs used to generate keys; 
		  when they are zeroized (for example, immediately after use, on system shutdown, etc.); 
		  and the type of zeroization procedure that is performed (overwrite with zeroes, overwrite three times with random pattern, etc.). 
		  If different types of memory are used to store the materials to be protected, the evaluator checks to ensure that the TSS describes the zeroization procedure in terms of the memory in which the data are stored 
		  (for example, "secret keys stored on a drive are zeroized by overwriting once with zeros, while secret keys stored on the internal hard drive are zeroized by overwriting three times with a random pattern that is changed before each write").
		<h:p/>  
		</TSS>
	        <Guidance>
	          There are no guidance EAs for this component.<h:p/>
	        </Guidance>
		<Tests>
		  If the TSF performs its own key destruction, the evaluator shall perform the following test:
		<testlist>
		<test>
		For each type of authorization service, encryption mode and encryption operation, a known authorization factor, and chain of keys must be provided to the evaluator with an associated ciphertext data set (e.g. if a passphrase is used to create an intermediate key, then the ciphertext containing the encrypted key as well as the intermediate key itself must be provided to the evaluator.) The evaluator shall use the email client in conjunction with a debugging or forensics utility to attempt to authorize themselves, resulting in the generation of a key or decryption of a key. The evaluator shall ascertain from the TSS what the vendor defines as "no longer needed" and execute the sequence of actions via the email client to invoke this state. At this point, the evaluator should take a dump of volatile memory and search the retrieved dump for the provided authorization credentials or keys (e.g. if the password was "PaSSw0rd", perform a string search of the forensics dump for "PaSSw0rd"). The evaluator must document each command, program or action taken during this process, and must confirm that no plaintext keying material resides in volatile memory. The evaluator must perform this test three times to ensure repeatability. If during the course of this testing the evaluator finds that keying material remains in volatile memory, they should be able to identify the cause (i.e. execution of the grep command for "PaSSw0rd" caused a false positive) and document the reason for failure to comply with this requirement. The evaluator shall repeat this same test, but looking for keying material in nonvolatile memory.<h:p/>
		</test>
		</testlist>
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>

	  <f-component cc-id="fcs_kyc_ext.1" name="Key Chaining">
	    <consistency-rationale> 
	      This SFR defines how email clients maintain key chains.
	      It does not impact the App PP functionality. 
	    </consistency-rationale>

	    <f-element>
	      <title> The TSF shall maintain a key chain of: 
	      <selectables linebreak="yes">
		<selectable>one</selectable>
		<selectable>a key stored in platform key storage</selectable>
		<selectable>
		  intermediate keys originating from: 
		  <selectables linebreak="yes">
		    <selectable>
		      a password as specified in FCS_CKM_EXT.5.1</selectable>
		    <selectable>one or more other authorization factor(s)</selectable>
		    <selectable>credentials stored in platform key storage</selectable>
		  </selectables>
		</selectable>
	      </selectables>
	      to the data encryption/decryption key(s) using the following
	      method(s): 
	      <selectables linebreak="yes">
		<selectable>use of the platform key storage</selectable>
		<selectable>use of platform key storage that performs key wrap with a
		TSF provided key</selectable>
		<selectable id="implkeywrap">implement key wrapping as specified in FCS_COP_EXT.2</selectable>
		<selectable id="implkeycomb">implement key combining as specified in FCS_SMC_EXT.1</selectable>
	      </selectables>
	      while maintaining an effective strength of 
	      <selectables linebreak="yes">
		<selectable>128 bits</selectable>
		<selectable>256 bits</selectable>
	      </selectables>
	      </title>
	      <note role="application">Key Chaining is the method of using multiple layers of
	      encryption keys to ultimately secure the data encryption key. The number of
	      intermediate keys will vary. This applies to all keys that contribute to the ultimate
	      wrapping or derivation of the data encryption key; including those in protected areas.
	      This requirement also describes how keys are stored. </note>
	      <aactivity>
		<TSS>
		  The evaluator shall verify that the TSS* describes a high-level description of the key hierarchy for all authorizations methods that are used to protect the encryption keys. 
		  The evaluator shall examine the TSS to ensure it describes the key chain in detail. The description of the key chain shall be reviewed to ensure it maintains a chain of keys using key wrap that meets FCS_COP_EXT.2. 
		<h:p/>  
		  The evaluator shall then verify that the TSS* describes how the key chain process functions, such that it does not expose any material that might compromise any key in the chain. A high-level description should include a diagram illustrating the key hierarchy implemented and detail where all keys and keying material is stored or what it is derived from. The evaluator shall examine the key hierarchy to ensure that at no point the chain could be broken without a cryptographic exhaust or knowledge of the key within the chain and the effective strength of the data encryption key is maintained throughout the key chain.
		<h:p/>*If necessary, this information may be presented in a proprietary document rather than the TSS.<h:p/>
		</TSS>
	        <Guidance>
	          There are no guidance EAs for this component.<h:p/>
	        </Guidance>
	        <Tests>
	          There are no test EAs for this component.
	        </Tests>
	      </aactivity>

	    </f-element>
	  </f-component>
	  
	  <f-component cc-id="fcs_smime_ext.1" name="Secure/Multipurpose Internet Mail Extensions (S/MIME)">
	    
	    <consistency-rationale>
	      This SFR defines how email messages are formatted when sent and received by the client.
	      It does not impact the App PP functionality. 
	    </consistency-rationale>
	    <f-element>
	      <title>The TSF shall implement both a sending and receiving S/MIME v3.2 Agent
	        as defined in RFC 5751, using CMS as defined in RFCs 5652, 5754, and 3565. </title>
	      <note role="application"> The RFCs allow for an agent to be either sending or receiving,
	        or to include both capabilities. The intent of this requirement is to ensure that the
	        email client is capable of both sending and receiving S/MIME v3.2 messages. </note>
	    </f-element>
	    <f-element>
	      <title>The TSF shall transmit the ContentEncryptionAlgorithmIdentifier for
	        AES-128 CBC and AES-256 CBC as part of the S/MIME protocol. </title>
	      <note role="application"> AES was added to CMS as defined in RFC 3565.</note>
	    </f-element>
	    <f-element>
	      <title>The TSF shall present the digestAlgorithm field with the following
	        Message Digest Algorithm identifiers
	        <selectables>
	          <selectable>id-sha256</selectable>
	          <selectable>id-sha384</selectable>
	          <selectable>id-sha512</selectable>
	        </selectables> and no others as part of the S/MIME protocol. </title>
	    </f-element>
	    <f-element>
	      <title>The TSF shall present the AlgorithmIdentifier field with the following
	        sha256withRSAEncryption and
	        <selectables linebreak="yes">
	          <selectable>sha384WithRSAEncryption</selectable>
	          <selectable>sha512WithRSAEncryption</selectable>
	          <selectable>ecdsa-with-sha256</selectable>
	          <selectable>ecdsa-with-sha384</selectable>
	          <selectable>ecdsa-with-sha512</selectable>
	        </selectables> and no other algorithms as part of the S/MIME protocol. </title>
	      <note role="application"> RFC 5751 mandates that receiving and sending agents support
	        RSA with SHA256. The algorithms to be tested in the evaluated configuration are
	        limited to the algorithms specified in the FCS_SMIME_EXT.1.4
	        selection. Any other algorithms implemented that do not comply with these requirements
	        should not be included in an evaluated email client. </note>
	    </f-element>
	    <f-element>
	      <title>The TSF shall support use of different private keys (and associated
	        certificates) for signature and for encryption as part of the S/MIME protocol.
	      </title></f-element>
	    <f-element>
	      <title>The TSF shall only accept a signature from a certificate with the
	        digitalSignature bit set as part of the S/MIME protocol. </title>
	      <note role="application"> It is acceptable to assume that the digitalSignature bit is
	        set in cases where there is no keyUsage extension. </note>
	    </f-element>
	    <f-element>
	      <title>The TSF shall implement mechanisms to retrieve certificates and
	        certificate revocation information
	        <selectables>
	          <selectable>for each signed/encrypted message sent/received </selectable>
	          <selectable> <assignable>frequency</assignable></selectable>
	        </selectables>
	        as part of the S/MIME protocol.
	      </title>
	      <note role="application">In accordance with FIA_X509_EXT.1.1 in <xref to="bibAppPP"/>,
	        certificate revocation may use a Certificate Revocation List (CRL) or Online Certificate
	        Status Protocol (OCSP). The email client can define how this mechanism behaves,
	        including whether it uses the underlying OS, but it is required that a mechanism
	        exists such that revocation status is supported and so that certificates can be
	        retrieved for sending/receiving messages. Frequency is configurable in FMT_MOF_EXT.1.1. In this requirement, frequency can be interpreted as a
	        one-time function with local storage, as a regularly scheduled retrieval, or as a
	        mechanism that requires manual intervention. If the retrieval mechanism is periodic in
	        nature, then the ST author will need to include an iteration of FCS
	        for storage of revocation information; storage of certificates is covered in FCS_CKM.
	        The import of certificates and certificate chains is not included in this requirement,
	        but is covered in FIA_X509 and FMT_MOF. </note>
	      
	      <aactivity>
	        <TSS>
	          The evaluator shall verify that the version of S/MIME implemented by the email client is present in the TSS. The evaluator shall also verify that the algorithms supported are specified, and that the algorithms specified are those listed for this component.
	          <h:p/>The evaluator shall verify that the TSS describes the ContentEncryptionAlgorithmIdentifier and whether the required behavior is performed by default or may be configured.
	          <h:p/>The evaluator shall verify that the TSS describes the digestAlgorithm and whether the required behavior is performed by default or may be configured.
	          <h:p/>The evaluator shall verify that the TSS describes the AlgorithmIdentifier and whether the required behavior is performed by default or may be configured.
	          <h:p/>The evaluator shall verify that the TSS describes the retrieval mechanisms for both certificates and certificate revocation as well as the frequency at which these mechanisms are implemented.<h:p/>
	        </TSS>
	        <Guidance>
	          The evaluator shall review the operational guidance to ensure that it contains instructions on configuring the email client such that it complies with the description in the TSS.
	          <h:p/>If the TSS indicates that the algorithms in FCS_SMIME_EXT.1.2 must be configured to meet the requirement, the evaluator shall verify that the operational guidance includes the configuration of this ID.
	          <h:p/>If the TSS indicates that the algorithms in FCS_SMIME_EXT.1.3 must be configured to meet the requirement, the evaluator shall verify that the operational guidance includes the configuration.
	          <h:p/>If the TSS indicates that the algorithms in FCS_SMIME_EXT.1.4 must be configured to meet the requirement, the evaluator shall verify that the operational guidance includes the configuration of this ID.
	          <h:p/>If the TSS indicates that the mechanisms in FCS_SMIME_EXT.1.7 are configurable, the evaluator shall verify that the operational guidance includes the configuration of these mechanisms.<h:p/>
	        </Guidance>
	        <Tests>
	          The evaluator shall perform the tests listed below. These tests can be performed in conjunction with the tests specified in FIA_X509_EXT.1 (defined in the Base-PP) for certificate/certificate chain verification and in FDP_NOT_EXT.1.<h:p/>
	          <testlist>
	            <test>The evaluator shall both send and receive a message with no protection (no signature or encryption) and verify that the message is transmitted properly and can be viewed at the receiving agent. This transmission can be performed as part of a number of mechanisms; it is sufficient to observe that the message arrives at the intended recipient with the same content as when sent.</test>
	            <test>The evaluator shall both send and receive a signed message using each of the algorithms specified in the ST corresponding to the requirement and verify that the signature is valid for both received and sent messages. After verifying the signatures are valid, the evaluator shall send a signed message using each of the algorithms specified in the ST and use a man-in-the-middle tool to modify at least one byte of the message such that the signature is no longer valid. This can be done by modifying the content of the message over which the signature is calculated or by modifying the signature itself. The evaluator shall then verify that the received message fails the signature validation check.</test>
	            <test>The evaluator shall both send and receive an encrypted message using each of the algorithms specified in the ST.</test>
	            <test>The evaluator shall verify that the contents are encrypted in transit and that the received message decrypts.</test> 
	            <test>After verifying the message decrypts, the evaluator shall send an encrypted message using each of the algorithms specified in the ST and use a man-in-the-middle tool to modify at least one byte of the message such that the encryption is no longer valid. The evaluator shall then verify that the received message fails to decrypt.</test>
	            <test>The evaluator shall both send and receive a message that is both signed and encrypted. In addition, the evaluator uses a man-in-the-middle tool to modify at least one byte of the message such that the encryption and signature are no longer valid. The evaluator shall then verify that the received message fails to decrypt, fails the signature validation check, or both.</test>
	            <test>The evaluator shall send a signed message to the email client using a signature algorithm not supported according to the digestAlgorithm ID (e.g., SHA1). The evaluator shall then verify that the email client provides a notification that the contents cannot be verified because the signature algorithm is not supported.</test>
	            <test>The evaluator shall send an encrypted message to the email client using an encryption algorithm not supported according to the AlgorithmIdentifier field. The evaluator shall then verify that the email client does not display/decrypt the contents of the message.</test>
	            <test>The evaluator shall send the email client a message signed by a certificate without the digitalSignature bit set. The evaluator shall then verify that the email client notifies the user that the signature is invalid.</test>
	            <test>The evaluator shall send the email client a message signed by a certificate without the Email Protection purpose in the extendedKeyUsage. The evaluator shall then verify that the email client notifies the user that the signature is invalid.</test>
	            <test>The evaluator shall verify that the email client uses OCSP or downloads the CRL at the assigned frequency.</test>
	          </testlist>
	        </Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	</sec:man_fcs>
	<sec:man_fdp title="User Data Protection (FDP)">
	  <f-component cc-id="fdp_not_ext.1" name="Notification of S/MIME Status">
	    <consistency-rationale>
	      This SFR defines the behavior an email client exhibits when a message is received.
	      It does not impact the App PP functionality.
	    </consistency-rationale>

	    <f-element>
	      <title>The TSF shall display a notification of the S/MIME status of received
	      emails upon viewing.</title>
	      <note role="application">S/MIME status is whether the email has been signed or encrypted
	      and whether the signature can be verified and the associated certificate can be validated. This
	      notification must at least display when the email content is viewed. Many
	      implementations also display the S/MIME status of each email when all emails are
	      viewed as a list. </note>
	      <aactivity>
		<TSS>
		The evaluator shall ensure that the TSS describes notifications of S/MIME status, including whether S/MIME status is also indicated upon viewing a list of emails.<h:p/>
		</TSS>
		<Guidance>
		The evaluator shall verify that the operational guidance provides a description (with appropriate visual figures) of the S/MIME status notification(s), including how each of the following are indicated: encryption, verified and validated signature, and unverified and unvalidated signature.<h:p/>
		</Guidance>
		<Tests>The evaluator shall perform the following tests and may perform them in conjunction with the tests for FCS_SMIME_EXT.1:<h:p/>
		<testlist>
		  <test>The evaluator shall send the client an unencrypted and unsigned email and verify that no notifications are present upon viewing.<h:p/></test>
		  <test>The evaluator shall send the client an encrypted email and verify that the encrypted notification is present upon viewing.<h:p/></test>
		  <test>The evaluator shall send the client a valid signed email and verify that the signed notification is present upon viewing.<h:p/></test>
		  <test>The evaluator shall send the client an invalid signed email (for example, using a certificate that does not contain the correct email address or a certificate that does not chain to the root store) and verify that the invalid signature notification is present upon viewing.<h:p/></test>
		</testlist>
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	  <f-component cc-id="fdp_smime_ext.1" name="S/MIME">
	    <consistency-rationale>
	      This SFR defines the format an email client shall use as output for cryptographic operations.
	      It does not impact the App PP functionality.
	    </consistency-rationale>
	    

	    <f-element>
	      <title>The TSF shall use S/MIME to sign, verify, encrypt, and decrypt
	      mail.</title>
	      <note role="application"> Note that this requirement does not mandate that S/MIME be
	      used for all incoming/outgoing messages, or that the email client automatically
	      encrypt or sign/verify all sent or received messages. This requirement only
	      specifies that the mechanism for digital signature and encryption must be
	      S/MIME.</note>

	      <aactivity>
		<TSS>
		The evaluator shall verify that the TSS contains a description of the S/MIME implementation and its use to protect mail from undetected modification using digital signatures and unauthorized disclosure using encryption. The evaluator shall also verify that the TSS describes whether signature verification and decryption occur at receipt or viewing of the message contents, and whether messages are stored with their S/MIME envelopes.<h:p/>
		</TSS>
		<Guidance>
	        The evaluator shall ensure that the operational guidance includes instructions for configuring a certificate for S/MIME use and instructions for signing and encrypting email.<h:p/>
		</Guidance>
		<Tests>Tests for this component are performed in conjunction with tests for FCS_SMIME_EXT.1 and FDP_NOT_EXT.1.
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	</sec:man_fdp>
	<sec:man_fia title="Identification and Authentication (FIA)">
	  <f-component cc-id="fia_x509_ext.3" name="X509 Authentication and Encryption">
	    <consistency-rationale>
	      This SFR defines the format an email client shall use for certificates to perform encryption and authentication.
	      It does not impact the App PP functionality.
	    </consistency-rationale>
	    <f-element>
	      <title>The TSF shall use X.509v3 certificates as defined by RFC 5280 to support
	      encryption and authentication for S/MIME. </title>
	    </f-element>
	    <f-element>
	      <title> The TSF shall prevent the establishment of a trusted communication
	      channel when the peer certificate is deemed invalid. </title>
	      <!-- editor's note: removed first sentence of app note ( Trusted communication channels include any of TLS performed by the email client. ) because it goes without saying that TLS is a trusted channel per FTP_DIT_EXT.1  -->
	      <note role="application">Validity is determined by the certificate path, the expiration date,
	      and the revocation status in accordance with RFC 5280. </note>
	    </f-element>
	    <f-element>
	      <title> The TSF shall prevent the installation of code if the code signing
	      certificate is deemed invalid. </title>
	    </f-element>
	    <f-element>
	      <title> The TSF shall prevent the encryption of email if the email protection
	      certificate is deemed invalid. </title>
	    </f-element>
	    <f-element>
	      <title> The TSF shall prevent the signing of email if the email protection
	      certificate is deemed invalid. </title>
	      <aactivity>
		<TSS>
		The evaluator shall check the TSS to ensure that it describes how the email client chooses which certificates to use so that the email client can use the certificates.<h:p/>
		The evaluator shall examine the TSS to confirm that it describes the behavior of the email client when a connection cannot be established during the validity check of a certificate used in establishing a trusted channel and protecting email.<h:p/>
		</TSS>
		  <Guidance>
		    The evaluator shall verify that the administrative guidance contains any necessary instructions for configuring the operating environment so that the email client can use the certificates.<h:p/>
		  </Guidance>
		<Tests>The evaluator shall perform the following tests:
		<testlist>
		  <test>The evaluator shall perform Test 1 for each function listed in FIA_X509_EXT.2.1 (from the Base-PP) that requires the use of certificates. The evaluator shall demonstrate that using a certificate without a valid certification path results in the function failing. The evaluator shall then load into the platform's root store any certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds.<h:p/></test> 
		  <test>The evaluator shall demonstrate that using a valid certificate that requires certificate validation checking to be performed in at least some part by communicating with a non-TOE IT entity. 
		    The evaluator shall then manipulate the environment so that the email client is unable to verify the validity of the certificate, and observe that the action selected in FIA_X509_EXT.2.2 (from the Base-PP) is performed. 
		    If the selected action is administrator-configurable, then The evaluator shall follow the operational guidance to determine that all supported administrator configurable options behave in their documented manner.</test>
		</testlist>
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	</sec:man_fia>
	<sec:man_fmt title="Security Management (FMT)">
	  <f-component cc-id="fmt_mof_ext.1" name="Management of Functions Behavior">
	    <consistency-rationale>
	      This SFR defines a specific set of management functions for an email client.
	      It does not impact the App PP functionality.
	    </consistency-rationale>

	    <f-element>
	      <title>The TSF shall be capable of performing the following management
	      functions, controlled by the user or administrator as shown: <h:ul>
	      <h:li> X: Mandatory</h:li>
	      <h:li> O: Optional</h:li>
	    </h:ul>
	    <management-function-set default="O">
	      <manager cid='a'>Administrator</manager>
	      <manager cid='u'>User</manager>

	      <management-function>
		<text>Enable/disable downloading embedded objects globally
		and by <selectables>
		<selectable>domain</selectable>
		<selectable>sender</selectable>
		<selectable>no other method</selectable>
	      </selectables>
		</text>
	      </management-function>
	      <management-function><text>Enable/disable plaintext-only mode globally and by <selectables>
	      <selectable>domain</selectable>
	      <selectable>sender</selectable>
	      <selectable>no other method</selectable>
	    </selectables></text>
	      </management-function>
	      <management-function><text> Enable/disable rendering and execution of
	      attachments globally and by <selectables>
	      <selectable>domain</selectable>
	      <selectable>sender</selectable>
	      <selectable>no other method</selectable>
	    </selectables>
	  </text>
	      </management-function>
	      <management-function><text> Enable/disable email notifications </text></management-function>
	      <management-function><text> Configure a certificate repository for encryption </text></management-function>
	      <management-function><text> Configure whether to establish a trusted channel or
	      disallow establishment if the email client cannot establish a connection to
	      determine the validity of a certificate </text></management-function>
	      <management-function><text> Configure message sending/receiving to only use
	      cryptographic algorithms defined in FCS_SMIME_EXT.1
	      </text></management-function>
	      <management-function><text> Configure CRL retrieval frequency </text></management-function>
	      <management-function><text> Enable/disable support for add-ons </text></management-function>
	      <management-function><text> Change password/passphrase authentication
	      credential</text></management-function>
	      <management-function><text> Disable key recovery
	      functionality</text></management-function>
	      <management-function><text> Configure cryptographic
	      functionality</text></management-function>
	      <management-function><text>
		<assignable>Other management functions</assignable>
	      </text></management-function>
	    </management-function-set>
	      </title>
	      <note role="application">
		
		  For these management functions, the term "Administrator" refers
		  to the administrator of a non-mobile device or the device owner of a mobile device.
		  The Administrator is responsible for management activities, including setting the
		  policy that is applied by the enterprise on the email client. The Administrator could
		  be acting remotely and could be the MTA administrator acting through a centralized
		  management console or dashboard. Applications used to configure enterprise policy
		  should have their own identification and authorization and additional security
		  requirements to ensure that the remote administration is trusted.
		  <h:p/>
		  The intent of
		  this requirement is to allow the Administrator to configure the email client with a
		  policy that may not be over-ridden by the user. If the Administrator has not set a
		  policy for a particular function, the user may still perform that function.
		  Enforcement of the policy is done by the email client itself, or the email client and
		  the email client platform in coordination with each other.
	        <h:p/>
		  The function to
		  configure whether to establish a trusted channel corresponds to the functionality
		  described in FIA_X509_EXT.2.2 (from the Base-PP). The Administrator has the
		  option of accepting or rejecting all certificates that cannot be validated, accepting
		  a given certificate that cannot be validated, or not accepting a given certificate
		  that cannot be validated. Depending on the choice that the Administrator has made in
		  FIA_X509_EXT.2.2 (from the Base-PP), the trusted connection will either be
		  allowed for all certificates that cannot be validated, disallowed for all certificates
		  that cannot be validated, allowed for a given certificate that cannot be validated, or
		  disallowed for a given certificate that cannot be validated. 
	        <h:p/>
		  If password or
		  passphrase authorization factors are implemented by the email client, then the
		  appropriate "change" selection must be included. 
	        <h:p/>
		  If the email client provides
		  configurability of the cryptographic functions (for example, key size), then "configure cryptographic
		  functionality" will be included, and the specifics of the functionality offered can
		  either be written in this requirement as bullet points, or included in the TSS. This applies even if the configuration is in the form of parameters that may be passed to cryptographic functionality implemented on the TOE platform.
	        <h:p/>
		  If the email client does include a key recovery function, the
		  email client must provide the capability for the user to turn this functionality off
		  so that no recovery key is generated and no keys are permitted to be exported.
		
	      </note>
	      <aactivity>
		The evaluation activities for this component will be driven by the selections made by the ST author. If a capability is not selected in the ST, the noted evaluation activity does not need to be performed. 
		<TSS>
		  The evaluator shall verify that the TSS describes those management functions which may only be configured by the email client platform administrator and cannot be overridden by the user when set according to policy.<h:p/>
		  Change Password: The evaluator shall examine the Operational Guidance to ensure that it describes how the password/passphrase-based authorization factor is to be changed.<h:p/>
		  Disable Key Recovery: If the email client supports key recovery, this must be stated in the TSS. The TSS shall also describe how to disable this functionality. This includes a description of how the recovery material is provided to the recovery holder.<h:p/>
		  Cryptographic Configuration: The evaluator shall determine from the TSS for other requirements (FCS_*) what portions of the cryptographic functionality are configurable.<h:p/>
		</TSS>
		<Guidance>
		The evaluator shall examine the operational guidance to verify that it includes instructions for an email client platform administrator to configure the functions listed in FMT_MOF_EXT.1.1.<h:p/>
		Disable Key Recovery: If the email client supports key recovery, the guidance for disabling this capability shall be described in the operational guidance.<h:p/>
		  Cryptographic Configuration: The evaluator shall review the operational guidance to determine that there are instructions for manipulating all of the claimed mechanisms.<h:p/>
		</Guidance>
		<Tests>The evaluator shall perform the following tests:
		<testlist>
		  <test>The evaluator shall verify that all functions perform as intended by enabling, disabling, and configuring the functions.</test>
		  <test>The evaluator shall set management functions which are controlled by the (enterprise) administrator and cannot be overridden by the user. The evaluator shall apply these functions to the client, attempt to override each setting as the user, and ensure that the email client does not permit it.</test>
		  <test>[Conditional: the TSF has a key recovery capability] The evaluator shall devise a test that ensures that the key recovery capability has been or can be disabled following the guidance provided by the vendor</test>
		</testlist>
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	</sec:man_fmt>
	<sec:man_fpt title="Protection of the TSF (FPT)">
	  <f-component cc-id="fpt_aon_ext.1" name="Support for Only Trusted Add-ons">
	    <consistency-rationale>
	      This SFR defines what types of plugins an email client may use.
	      It does not impact the App PP functionality.
	    </consistency-rationale>
	    <f-element>
	      <title>The TSF shall include the capability to load <selectables>
	      <selectable id="aonext1_addon">trusted add-ons</selectable>
	      <selectable exclusive="yes">no add-ons</selectable>
	      </selectables>.</title>
	      <note role="application">FPT_AON_EXT.2 depends upon the selection
	      made here. If the email client does not include support for installing only trusted
	      add-ons, this requirement can be met by demonstrating the ability to disable all
	      support for add-ons as specified in FMT_MOF_EXT.1. Cryptographic
	      verification (i.e., trust) of add-ons is tested in FPT_AON_EXT.2.1.</note>
	      <aactivity>
		<TSS>
		The evaluator shall verify that the TSS describes whether the email client is capable of loading trusted add-ons.<h:p/>
		</TSS>
		<Guidance>
		  The evaluator shall examine the operational guidance to verify that it includes instructions on loading trusted add-on sources.<h:p/>
		</Guidance>
	        <Tests>The evaluator shall create or obtain an untrusted add-on and attempt to load it. The evaluator shall then verify that the untrusted add-on is rejected and cannot be loaded.
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	</sec:man_fpt>
	<sec:man_ftp title="Trusted Path/Channels (FTP)">
	  <f-component cc-id="ftp_itc_ext.1" name="Inter-TSF Trusted Channel">
	    <consistency-rationale>
	      This SFR defines which channels for an email client must be considered trusted.
	      It does not impact the App PP functionality. 
	    </consistency-rationale>
	    <f-element>
	      <title>The TSF shall initiate or receive communication via the trusted channel.
	      </title>
	    </f-element>
	    <f-element>
	      <title>The TSF shall communicate via the trusted channel for
	      <selectables linebreak="yes">
		<!-- Check these -->
		<selectable id="saslimap">IMAP</selectable>
		<selectable id="saslsmtp">SMTP</selectable>
		<selectable id="saslpop" >POP</selectable>
		<selectable>MAPI Extensions for HTTP</selectable>
		<selectable>MAPI/RPC</selectable>
		<selectable>ActiveSync</selectable>
		<selectable>
		  <assignable>other protocol (reference RFC or specification)</assignable>
		</selectable>
	      </selectables>.</title>
	      <note role="application">FIA_SASL_EXT.1 depends upon the
	      selection(s) made here. For example, if <h:i>POP</h:i> is chosen, then FIA_SASL_EXT.1 must be included in the ST.
	      Selections must include at least one sending and one receiving protocol. If the
	      assignment is used, the ST author must also include a reference for the protocol
	      (e.g., an RFC number). </note>
	      <aactivity>
		<TSS>
		The evaluator shall examine the TSS to determine that it describes the details of the email client connecting to a Mail Transfer Agent in terms of the trusted connection (i.e., TLS) according to FTP_DIT_EXT.1 in the Base-PP, 
		along with email client-specific options or procedures that might not be reflected in the specification.<h:p/>
		</TSS>
		<Guidance>
		  The evaluator shall confirm that the operational guidance contains instructions for establishing the connection to the Mail Transfer Agent.<h:p/>
		</Guidance>
		<Tests>
		The evaluator shall perform the following tests:
		<testlist>
		  <test>The evaluator shall ensure that the email client is able to initiate communications using any selected or assigned protocols specified in the requirement over TLS, setting up the connections as described in the operational guidance and ensuring that communication is successful.</test>
		  <test>The evaluator shall ensure that the email client is able to initiate communications with a Mail Transfer Agent using SMTP and any assigned protocols specified in the requirement over TLS, setting up the connections as described in the operational guidance and ensuring that communication is successful.</test>
		  <test>The evaluator shall ensure, for each communication channel with an authorized IT entity in tests 1 and 2, the channel data is not sent in plaintext. To perform this test, The evaluator shall use a sniffer and a packet analyzer. The packet analyzer must indicate that the protocol in use is TLS.</test>
		</testlist>
		</Tests>
	      </aactivity>
	    </f-element>
	  </f-component>
	</sec:man_ftp>

      </man-sfrs>
      
    
    
    <opt-sfrs>
      <sec:opt_fcs title="Cryptographic Support (FCS)">
      <f-component cc-id="fcs_ckm_ext.5" name="Cryptographic Key Derivation (Password/Passphrase Conditioning)">
        <consistency-rationale>This SFR defines restrictions on password composition and key derivation mechanisms. It defines functionality similar to FCS_CKM.1(3) in the Base-PP but has additional details 
          specific to the composition of the actual password authentication factor, rather than just defining a method for key derivation. 
        </consistency-rationale>
	<f-element>
	  <title>A password/passphrase used to generate a password authorization factor shall
	  enable up to <assignable>positive integer of 64 or more</assignable> characters in
	  the set of
	  <selectables linebreak="yes">
	    <selectable>upper case characters</selectable>
	    <selectable>lower case characters</selectable>
	    <selectable>numbers</selectable>
	    <selectable>special characters: !, @, #, $, %, ^, &amp;, *, (, )</selectable>
	    <selectable>
	      <assignable>other supported special characters</assignable>
	    </selectable>
	  </selectables>
	  and shall perform password-based key derivation in
	  accordance with a specified cryptographic algorithm 
	  <selectables linebreak="yes">
	    <selectable>HMAC-SHA-256</selectable>
	    <selectable>HMAC-SHA-384</selectable>
	    <selectable>HMAC-SHA-512</selectable>
	  </selectables> 
	  with 
	  <assignable>positive integer of 4096 or more</assignable>
	  iterations, and output cryptographic key sizes of 
	  <selectables linebreak="yes">
	    <selectable>128 bits</selectable>
	    <selectable>256 bits</selectable>
	  </selectables>
	  that meet NIST SP 800-132. </title>
	  <note role="application">
	      The password/passphrase is represented on the host machine as a
	      sequence of characters whose encoding depends on the email client and the underlying
	      OS. This sequence must be conditioned into a string of bits that is to be used as a
	      key of equivalent size to the rest of the key chain. 
	      <h:p/>
	      This password/passphrase
	      must be conditioned into a string of bits that forms the submask to be used as input
	      into a key. Conditioning can be performed using one of the identified hash functions
	      or the process described in NIST SP 800-132; the method used is selected by the ST author. SP 800-132 requires the use of a pseudo-random function (PRF)
	      consisting of HMAC with an approved hash function. The ST author
	      selects the hash function used, also includes the appropriate requirements for HMAC
	      and the hash function. 
	      <h:p/>
	      Appendix A of NIST SP 800-132 recommends setting the iteration
	      count in order to increase the computation needed to derive a key from a password and,
	      therefore, increase the workload of performing a password recovery attack. However,
	      for this PP-Module, a minimum iteration count of 4096 is required in order
	      to ensure that twelve bits of security is added to the password/passphrase value. A
	      significantly higher value is recommended to ensure optimal security. 
	    <h:p/>
	      There are
	      two aspects of this component that require evaluation: passwords/passphrases of the
	      length specified in the requirement (at least 64 characters) are supported, and that
	      the characters that are input are subject to the selected conditioning function. These
	      activities are separately addressed in the tests below.
	  </note>
	  <aactivity>
	    <TSS>
	    The evaluator shall verify that the TSS specifies the capability that exists to accept passwords/passphrases with the minimum number of characters specified in the ST in this assignment statement.<h:p/>
	      The evaluator shall examine the password hierarchy TSS to ensure that the formation of all keys is described and that the key sizes match that described by the ST author.<h:p/>
	    The evaluator shall check that the TSS describes the method by which the password/passphrase is first encoded and then fed to the SHA algorithm. The evaluator shall then verify that the settings for the algorithm (padding, blocking, etc.)
	    are described and that this description is consistent with the corresponding selections made in the SFR.<h:p/> 
	    The evaluator shall verify that the TSS contains a description of how the output of the hash function is used to form the submask that will be input into the function. For the NIST SP 800-132-based conditioning of the password/passphrase, 
	    the required evaluation activities will be performed when doing the EA for the appropriate requirements (e.g. FCS_COP.1.1(4) in the Base-PP). 
	      If any manipulation of the key is performed in forming the submask that will be used to form the key, the evaluator shall ensure that the TSS describes this process. 
	      No explicit testing of the formation of the submask from the input password is required.<h:p/>
	      The evaluator shall verify that the iteration count for PBKDFs performed by the email client comply with 
	      NIST SP 800-132 by ensuring that the TSS contains a description of the estimated time required to derive key material from passwords and how the email client increases the computation time for 
	      password-based key derivation (including but not limited to increasing the iteration count).<h:p/>
	    </TSS>
	      <Guidance>
	    The evaluator shall check the operational guidance to determine that it includes guidance on how to generate large passwords/passphrases external to the email client and 
	    instructions for how to configure the password/passphrase length and optional complexity settings (note to Management section). 
	    This is important because many default settings for passwords/passphrases will not meet the necessary entropy needed as specified in this PP-Module.<h:p/>
	      </Guidance>
	        <Tests>The evaluator shall perform the following tests:
	    <testlist>
	      <test>The evaluator shall ensure that the email client supports passwords/passphrases of exactly 64 characters.</test>
	      <test>The evaluator shall ensure that the email client supports a password/passphrase with less than 64 characters.</test>
	      <test>[Conditional: the email client supports a maximum character length greater than 64 characters] The evaluator shall ensure that the email client accepts password/passphrases up to the maximum character length and no larger.</test>
	      
	    </testlist>
	          <h:p/>
	          No explicit testing of the formation of the authorization factor from the input password/passphrase is required.
	        </Tests>
	  </aactivity>
	</f-element>
      </f-component>
        <f-component cc-id="fcs_ivg_ext.1" name="Initialization Vector Generation">
          <consistency-rationale>
            This SFR defines how clients generate IVs for cryptographic operations.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <f-element>
            <title>The TSF shall create IVs in the following manner: <selectables
              linebreak="yes">
              <selectable>CBC: IVs shall be non-repeating</selectable>
              <selectable>CCM: IV shall be non-repeating</selectable>
              <selectable>XTS: No IV. Tweak values shall be non-negative integers, assigned
                consecutively, and starting at an arbitrary non-negative integer</selectable>
              <selectable>GCM: IV shall be non-repeating. The number of invocations of GCM shall
                not exceed 2^32 for a given secret key.</selectable>
            </selectables></title>
            <note role="application">FCS_IVG_EXT.1.1 specifies how the IV should be handled for each
              encryption mode. CBC, XTS, and GCM are allowed for AES encryption of the data. AES-CCM
              is an allowed mode for Key Wrapping.</note>
            <aactivity>
              <TSS>
                The evaluator shall ensure the TSS describes how IVs and tweaks are handled (based on the AES mode). 
                The evaluator shall confirm that the IVs and tweaks meet the stated requirements.<h:p/>
                If the platform provides the IV generation, then the evaluator shall examine the TSS to verify that it describes how the IV generation is invoked.
              </TSS>
              <Guidance>
                There are no guidance EAs for this component.<h:p/>
              </Guidance>
              <Tests>
                There are no test EAs for this component.<h:p/>
              </Tests>
            </aactivity>
          </f-element>
          
        </f-component>
      <f-component cc-id="fcs_nog_ext.1" name="Cryptographic Nonce Generation">
	<consistency-rationale>
	  This SFR defines how clients generate nonces for cryptographic operations.
	  It does not impact functionality described by the Base-PP.
	</consistency-rationale>
	<f-element>
	  <title>The TSF shall only use unique nonces with a minimum size of [<h:i>64</h:i>]
	  bits.</title>
	  <aactivity>
	    <TSS>
	    The evaluator shall verify that the TSS describes how unique nonces are created.
	    </TSS>
	    <Guidance>
	      There are no guidance EAs for this component.<h:p/>
	    </Guidance>
	    <Tests>
	      There are no test EAs for this component.<h:p/>
	    </Tests>
	  </aactivity>
	</f-element>
      </f-component>

        <f-component cc-id="fcs_sag_ext.1" name="Cryptographic Salt Generation">
          <consistency-rationale>
            This SFR defines how clients generate salts for cryptographic operations.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <f-element>
            <title>The TSF shall only use salts that are generated by a <selectables
              linebreak="yes">
              <selectable>DRBG as specified in FCS_RBG_EXT.1</selectable>
              <selectable>DRBG provided by the host platform</selectable>
            </selectables>
            </title>
            
            <aactivity>
              <TSS>
                The evaluator shall ensure the TSS describes how salts are generated. 
                The evaluator shall confirm that the salt is generated using a DRBG as described in FCS_RBG_EXT.1 in <xref to="bibApp"/> or by the Operational Environment. 
                If an external function is used for this purpose, the evaluator shall ensure tha the TSS references the specific API that is called with inputs.<h:p/>
                If the email client is relying on random bit generation from the host platform, 
                the evaluator shall verify that the TSS includes the name/manufacturer of the external DRBG and describes the function call and parameters used when calling the external DRBG function. 
                If different external DRBGs are used for different platforms, the evaluator shall ensure that the TSS identifies each RBG for each platform.<h:p/> 
                For all cases where the TSF relies on an external DRBG, the evaluator shall ensure that the TSS includes a short description of the TOE developer's assumption for the amount of entropy that is used to seed the external DRBG.<h:p/>
              </TSS>
              <Guidance>
                There are no guidance EAs for this component.<h:p/>
              </Guidance>
              <Tests>
                There are no test EAs for this component.<h:p/>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </sec:opt_fcs>
      <sec:opt_fdp title="User Data Protection (FDP)">
      <f-component cc-id="fdp_not_ext.2" name="Notification of URI">
	<consistency-rationale>
	  This SFR defines how clients display URIs in embedded links
	  It does not impact functionality described by the Base-PP.
	</consistency-rationale>
	<f-element>
	  <title>The TSF shall display the full Uniform Resource Identifier (URI) of any
	  embedded links.</title>
	  <note role="application"> Embedded links are HTML URI objects which may have a tag (such
	  as a word, phrase, icon, or picture) that obfuscates the URI of the link. The intent
	  of this requirement is to de-obfuscate the link. The URI may be displayed as a
	  "mouse-over" event or may be rendered next to the tag. </note>
	  <aactivity>
	    <TSS>
	    The evaluator shall verify that the TSS includes a description of how embedded links are rendered and the method by which the URI of the link is displayed.<h:p/>
	    </TSS>
	    <Guidance>
	    The evaluator shall ensure that the operational guidance includes instructions (with any appropriate visual figures) for viewing the URI of an embedded link.<h:p/>
	    </Guidance>
	    <Tests>The evaluator shall send the client an HTML message with an embedded link whose tag is not the URI itself (for example, "click here"). 
	      The evaluator shall view the message and, following the instructions in the operational guidance, verify that the full URI of the embedded link is displayed.<h:p/>
	    </Tests>
	  </aactivity>
	</f-element>
      </f-component>
      <f-component cc-id="fdp_pst_ext.1" name="Storage of Persistent Information">
	<consistency-rationale>
	  This SFR defines how clients display URIs in embedded links
	  It does not impact functionality described by the Base-PP.
	</consistency-rationale>
	<f-element>
	  <title>The TSF shall be capable of operating without storing persistent
	  information to the client platform with the following exceptions:
	  <selectables>
	    <selectable>credential information</selectable>
	    <selectable>administrator provided configuration information</selectable>
	    <selectable>certificate revocation information</selectable>
	    <selectable>no exceptions</selectable>
	  </selectables>.</title>
	  <note role="application">Any data that persists after the email client closes, including
	  temporary files, is considered to be persistent data. Satisfying this requirement
	  would require the use of a protocol such as IMAP or MAPI. It is not compatible with
	  POP.</note>
	  <aactivity>
	    <TSS>
	    The evaluator shall examine the TSS to determine that it describes all persistent information stored on the platform, and the locations on the platform where these data are stored. 
	    The evaluator shall confirm that the persistent data described is limited to the data identified in the selection.<h:p/>
	    </TSS>
	      <Guidance>
	        There are no guidance EAs for this component. <h:p/>
	      </Guidance>
	   
	    <Tests>
	      The evaluator shall operate the email client so that several messages, signed, encrypted, and unsigned, are processed. 
	    The evaluator shall also exercise functionality such as moving messages to folders, writing unsent drafts of messages, etc., 
	    as provided by the client. The evaluator shall then examine the client platform to determine that the only persistent information stored is that which is identified in the TSS.
	    </Tests>
	  </aactivity>
	</f-element>
      </f-component>
      <f-component cc-id="fdp_ren_ext.1" name="Rendering of Message Content">
	<consistency-rationale>
	  This SFR defines functionality to display message content.
	  It does not impact functionality described by the Base-PP.
	</consistency-rationale>

	<f-element>
	  <title>The TSF shall have a plaintext-only mode which disables the rendering
	  and execution of <selectables linebreak="yes">
	  <selectable>HTML</selectable>
	  <selectable>JavaScript</selectable>
	  <selectable><assignable>other embedded content types</assignable></selectable>
	  <selectable>no embedded content types</selectable>
	  </selectables>. </title>
	  <note role="application">Plaintext-only mode prevents the automatic downloading,
	  rendering and execution of images, external resources and embedded objects such as
	  HTML or JavaScript objects. FMT_MOF_EXT.1.1 addresses
	  configuration of this mode. The ST author must identify all content types supported by
	  the email client through selections and assignments. If the email client only
	  supports plaintext-only mode, no embedded content types should be selected.</note>
	  <aactivity>
	    <TSS>
	    The evaluator shall ensure that the TSS describes plaintext-only mode for sending and receiving messages. The evaluator shall verify that the TSS describes whether the email client is capable of rendering and executing HTML or JavaScript. 
	    If the email client can render or execute HTML or JavaScript, this description shall indicate how the email client handles received messages that contain HTML or JavaScript while in plaintext-only mode, 
	    and the evaluator shall ensure that the description indicates that embedded objects of these types are not rendered or executed and images/external resources are not automatically downloaded.<h:p/>
	    </TSS>
	    <Guidance>
	    The evaluator shall examine the operational guidance and verify that it contains instructions for enabling plaintext-only mode.
	    </Guidance>
	    <Tests>The evaluator shall perform the following tests:
	    <testlist>
	      <test>[Conditional: HTML is selected in FDP_REN_EXT.1.1] The evaluator shall send a message to the client containing HTML embedded objects and shall verify that the HTML renders. The evaluator shall then enable plaintext-only mode and verify that the HTML does not render.</test>
	      <test>[Conditional: JavaScript is selected in FDP_REN_EXT.1.1] The evaluator shall send a message to the client containing JavaScript embedded objects and shall verify that the JavaScript renders and executes. The evaluator shall then enable plaintext-only mode and verify that the JavaScript does not render or execute.</test>
	    </testlist>
	    </Tests>
	  </aactivity>
	</f-element>
      </f-component>
      </sec:opt_fdp>
    </opt-sfrs>
    
    
    
    
    <sel-sfrs>
      
      
      <sec:sel_fcs title="Cryptographic Support (FCS)">
        <f-component cc-id="fcs_cop_ext.2" name="Key Wrapping">
          <!-- 
          <selection-depends req="fcs_kyc_ext.1.1" ids="implkeywrap"/>
          <selection-depends req="fcs_ckm_ext.3.1" ids="ckm_wrapped"/>  -->
          <consistency-rationale>
            This SFR defines how clients wrap keys.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <f-element>
            <title>The TSF shall <selectables linebreak="yes">
              <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
              <selectable>implement functionality to perform Key Wrapping</selectable>
            </selectables> in accordance with a specified cryptographic algorithm <selectables
              linebreak="yes">
              <selectable>AES Key Wrap</selectable>
              <selectable>AES Key Wrap with Padding</selectable>
              <selectable>RSA using the KTS-OAEP-basic scheme</selectable>
              <selectable>RSA using the KTS-OAEP-receiver-confirmation scheme</selectable>
              <selectable>ECC CDH</selectable>
            </selectables> and the cryptographic key size <selectables linebreak="yes">
              <selectable>128 bits (AES)</selectable>
              <selectable>256 bits (AES)</selectable>
              <selectable>2048 (RSA)</selectable>
              <selectable>4096 (RSA)</selectable>
              <selectable>256-bit prime</selectable>
              <selectable>modulus (ECC CDH)</selectable>
              <selectable>384-bit prime modulus (ECC CDH)</selectable>
            </selectables> that meet the following: <selectables linebreak="yes">
              <selectable>"NIST SP 800-38F" for Key Wrap (section 6.2) and Key Wrap with Padding
                (section 6.3)</selectable>
              <selectable>"NIST SP 800-56B" for RSA using the KTS-OAEP-basic (section 9.2.3) and
                KTS-OAEP-receiver-confirmation (section 9.2.4) scheme, "NIST SP 800-56A rev 2" for
                ECC CDH (sections 5.6.1.2 and 6.2.2.2) </selectable>
            </selectables>. </title>
            <note role="application">In the first selection, the ST author chooses the entity that
              performs the decryption/encryption. In the second selection, the ST author chooses the
              method used for encryption: <h:ul><h:li>Using one of the two AES-based Key Wrap methods
                specified in NIST SP 800-38F</h:li><h:li>Using one of the two the KTS-OAEP schemes
                  for RSA as described in NIST SP 800-56B (KTSOAEP-basic described in section
                  9.2.3)</h:li><h:li>Using ECC CDH as described in NIST SP 800-56A section
                    6.2.2.2.</h:li></h:ul> The third selection should be made to reflect the key size.
              2048/4096 is used for the RSA-based schemes, while the size of the prime modulus is
              used for ECC-based schemes. Support for 256-bit AES key sizes will be required for
              products entering evaluation after Quarter 3, 2015. Based on the method(s) selected,
              the last selection should be used to select the appropriate reference(s). </note>
            <aactivity>
              <TSS>
              The evaluator shall examine the TSS to ensure that it has a high-level description of how the key is protected and meets the appropriate specification.
              </TSS>
              <Guidance>
                There are no guidance EAs for this component.<h:p/>
              </Guidance>
              <Tests>
                There are no test EAs for this component.<h:p/>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component cc-id="fcs_smc_ext.1" name="Key Combining">
          <!-- 
          <selection-depends req="fcs_kyc_ext.1.1" ids="implkeycomb"/>
          <selection-depends req="fcs_ckm_ext.3.1" ids="ckm_keysplit"/>
           -->
          <consistency-rationale>
            This SFR defines how clients combine keys.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <f-element>
            <title>The TSF shall combine submasks using the following method <selectables
              linebreak="yes">
              <selectable>exclusive OR (XOR)</selectable>
              <selectable>SHA-256</selectable>
              <selectable>SHA-512</selectable>
            </selectables> to generate another key. </title>
            <note role="application">This requirement specifies the way that a product may combine
              the various submasks by using either an XOR or an approved SHA-hash. </note>
            <aactivity>
              <TSS>
                If keys are XORed together to form an intermediate key, the evaluator shall verify that the TSS describes how this is performed (e.g., if there are ordering requirements, checks performed, etc.). <h:p/> 
                The evaluator shall also confirm that the TSS describes how the length of the output produced is at least the same as that of the data encryption key.<h:p/>
              </TSS>
              <Guidance>
                There are no guidance EAs for this component.<h:p/>
              </Guidance>
              <Tests>
                There are no test EAs for this component.<h:p/>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </sec:sel_fcs>
    
      
      <sec:sel_fia title="Identification and Authentication (FIA)">
      <f-component cc-id="fia_sasl_ext.1" name="Simple Authentication and Security Layer (SASL)">
        <!-- 
        <selection-depends req="FTP_ITC_EXT.1.2" ids="saslimap,saslsmtp,saslpop"/>  -->
        <consistency-rationale>
          This SFR defines an alternate method of transmitting messages.
          It does not impact functionality described by the Base-PP.
        </consistency-rationale>
        <f-element>
          <title>The TSF shall implement support for Simple Authentication and Security
            Layer (SASL) that complies with RFC 4422. </title>
          <note role="application">SASL is needed if the email implements SMTP to send messages.
            Clients that do not use SMTP (e.g., ActiveSync or MAPI) would not need to implement
            support for SASL.</note>
        </f-element>
        <f-element>
          <title>The TSF shall support the POP3 CAPA and AUTH extensions for the SASL
            mechanism. </title>
        </f-element>
        <f-element>
          <title>The TSF shall support the IMAP CAPABILITY and AUTHENTICATE extensions
            for the SASL mechanism. </title>
        </f-element>
        <f-element>
          <title>The TSF shall support the SMTP AUTH extension for the SASL mechanism. </title>
          <note role="application"> In order for an email client to support PKI X.509 Certificates
            for POP3, IMAP and SMTP as required in this document, the client must support the
            Simple Authentication and Security Layer (SASL) authentication method as described in
            RFC 4422, the AUTH and CAPA extensions for POP3, as described in RFC 5034, the
            AUTHENTICATION and CAPABILITY extensions for IMAP, as described in RFC 4959 and the
            AUTH extension for SMTP, as described in RFC 4954. </note>
          <aactivity>
            <TSS>
            The evaluator shall examine the TSS to verify that it describes the details of the email client connecting to a Mail Transfer Agent in terms of the SASL connection, 
            along with email client-specific options or procedures that might not be reflected in the specification.<h:p/>
            </TSS>
            <Guidance>
            The evaluator shall confirm that the operational guidance contains instructions for establishing the connection to the Mail Transfer Agent.<h:p/>
            </Guidance>
            <Tests>The evaluator shall also perform the following tests:
            <testlist>
              <test>The evaluator shall ensure that the email client is able to initiate communications using POP, IMAP and SMTP and requiring SASL, setting up the connections as described in the operational guidance and ensuring that communication is successful.</test>
              <test>The evaluator shall ensure, for each communication channel with an authorized IT entity in Test 1, that a valid SASL handshake is performed. To perform this test, The evaluator shall use a sniffer and a packet analyzer. The packet analyzer must indicate that the protocol in use is SASL.</test>
            </testlist>
            </Tests>
          </aactivity>
        </f-element>
      </f-component>
      </sec:sel_fia>
      
      
      <sec:sel_fpt title="Protection of the TSF (FPT)">
      <f-component cc-id="fpt_aon_ext.2" name="Trusted Installation and Update for Add-ons">
        <!-- 
	<selection-depends req="FPT_AON_EXT.1.1" ids="aonext1_addon"/>
	 -->
	<consistency-rationale>
	  This SFR defines how email clients verify Add-Ons.
	  It does not impact functionality described by the Base-PP.
	</consistency-rationale>
	<f-element>
	  <title>The TSF shall <selectables>
	  <selectable>provide the ability</selectable>
	  <selectable>leverage the platform</selectable>
	  </selectables> to provide a means to cryptographically verify add-ons using a digital
	  signature mechanism and <selectables>
	  <selectable>published hash</selectable>
	  <selectable>no other functions</selectable>
	  </selectables> prior to installation and update. </title>
	</f-element>
	<f-element>
	  <title>The TSF shall <selectables><selectable>provide the
	  ability</selectable><selectable>leverage the platform</selectable></selectables>
	  to query the current version of the add-on.</title>
	</f-element>
	<f-element>
	  <title>The TSF shall prevent the automatic installation of add-ons.</title>
	  <aactivity>
	    <TSS>
	    The evaluator shall examine the TSS to verify that it states that the email client will reject add-ons from untrusted sources.<h:p/>
	    </TSS>
	    <Guidance>
	    The evaluator shall examine the operational guidance to verify that it includes instructions on how to configure the email client with trusted add-on sources.<h:p/>
	    </Guidance>
	    <Tests>The evaluator shall perform the following tests:
	    <testlist>
	      <test>The evaluator shall create or obtain an add-on signed by a trusted source and attempt to install it. The evaluator shall then verify that the signature on the addon is valid and that the add-on can be installed.</test>
	      <test>The evaluator shall create or obtain an add-on signed with an invalid certificate and attempt to install it. The evaluator shall then verify that the signed addon is rejected and cannot be installed.</test>
	      <test>The evaluator shall create or obtain an add-on signed by a trusted source, modify the addon without resigning it, and attempt to install it. The evaluator shall then verify that the signed add-on is rejected and cannot be installed.</test>
	    </testlist>
	    </Tests>
	  </aactivity>
	</f-element>
      </f-component>
      </sec:sel_fpt>
   
    </sel-sfrs>
    <obj-sfrs/>
    <impl-dep-sfrs/>
  </sec:Security_Requirements>

  <bibliography>
    <cc-entry/>
    <entry id="bibAppPP">
      <tag>App PP</tag>
      <description>
        <h:a href="https://www.niap-ccevs.org/MMO/PP/PP_APP_v1.3.pdf"
	     >Protection Profile for Application Software, Version 1.3</h:a>, March 1, 2019
      </description>
    </entry>
    <entry id="bibmapispec">
      <tag>MS-OXCMAPIHTTP</tag>
      <description>
        <h:a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcmapihttp/d502edcf-0b22-42f2-8500-019f00d60245">Messaging Application Programming Interface (MAPI) Extensions for HTTP</h:a>
      </description>
    </entry>
    <entry id="MS-OXCRPC">
      <tag>MS-OXCRPC</tag>
      <description>
        <h:a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcrpc/137f0ce2-31fd-4952-8a7d-6c0b242e4b6a"> Wire Format Protocol</h:a>
      </description>
    </entry>
  </bibliography>

<!-- 
  <acronyms/>
   -->

</Module>
